import { Editor, Operation } from 'slate';
import * as Y from 'yjs';
import { applySlateOps as applySlateOperations } from '../src/apply';
import { toSlateOps } from '../src/convert';
import { SyncDoc, SyncElement } from '../src/model';

export interface YjsEditorTest extends Editor {
  isRemote: boolean;
  doc: Y.Doc;
  syncDoc: SyncDoc;
  shouldCaptureYjsUpdates: boolean;
  capturedYjsUpdates: Uint8Array[];
  onChangeComplete: () => void;
}

export const YjsEditorTest = {
  /**
   * Apply slate ops to Yjs
   */
  applySlateOpsToYjs: (e: YjsEditorTest, operations: Operation[]) => {
    try {
      e.doc.transact(() => {
        applySlateOperations(e.syncDoc, operations);
      });
    } catch (e) {
      console.error(e);
    }
  },

  /**
   * Apply Yjs events to slate
   */
  applyYjsEventsToSlate: (e: YjsEditorTest, events: Y.YEvent[]) => {
    const remoteEvents = events.filter((event) => !event.transaction.local);
    if (remoteEvents.length == 0) {
      return;
    }

    e.isRemote = true;

    Editor.withoutNormalizing(e, () => {
      toSlateOps(remoteEvents).forEach((op) => {
        e.apply(op);
      });
    });

    Promise.resolve().then(() => (e.isRemote = false));
  },

  /**
   * Capture Yjs updates generated by this editor.
   */
  captureYjsUpdate: (e: YjsEditorTest, update: Uint8Array, _origin: any) => {
    if (!e.shouldCaptureYjsUpdates) return;
    e.capturedYjsUpdates.push(update);
  },

  /**
   * Return captured Yjs updates.
   */
  getCapturedYjsUpdates: (e: YjsEditorTest): Uint8Array[] => {
    const result = e.capturedYjsUpdates;
    e.capturedYjsUpdates = [];
    return result;
  },

  /**
   * Apply one Yjs update to Yjs.
   */
  applyYjsUpdateToYjs: (
    e: YjsEditorTest,
    update: Uint8Array
  ): Promise<void> => {
    return new Promise((resolve) => {
      e.shouldCaptureYjsUpdates = false;
      e.onChangeComplete = () => {
        e.onChangeComplete = () => void {};
        resolve();
      };
      Y.applyUpdate(e.doc, update);
      e.shouldCaptureYjsUpdates = true;
    });
  },

  /**
   * Apply multiple Yjs updates to Yjs.
   */
  applyYjsUpdatesToYjs: async (e: YjsEditorTest, updates: Uint8Array[]) => {
    await Promise.all(
      updates.map((update) => {
        YjsEditorTest.applyYjsUpdateToYjs(e, update);
      })
    );
  },

  /**
   * Apply one slate operation to slate.
   */
  applySlateOpToSlate: (e: YjsEditorTest, op: Operation): Promise<void> => {
    return new Promise((resolve) => {
      e.onChangeComplete = () => {
        e.onChangeComplete = () => void {};
        resolve();
      };
      e.apply(op);
    });
  },

  /**
   * Apply multiple slate operations to slate.
   */
  applySlateOpsToSlate: async (e: YjsEditorTest, operations: Operation[]) => {
    await Promise.all(
      operations.map((op) => {
        YjsEditorTest.applySlateOpToSlate(e, op);
      })
    );
  },
};

export const withYjsTest = <T extends Editor>(editor: T): T & YjsEditorTest => {
  const e = editor as T & YjsEditorTest;

  const doc = new Y.Doc();
  const syncDoc = doc.getArray<SyncElement>('content');

  doc.on('update', (updateMessage: Uint8Array, origin: any) => {
    YjsEditorTest.captureYjsUpdate(e, updateMessage, origin);
  });
  syncDoc.observeDeep((events) => {
    YjsEditorTest.applyYjsEventsToSlate(e, events);
  });

  e.doc = doc;
  e.syncDoc = syncDoc;
  e.isRemote = false;
  e.shouldCaptureYjsUpdates = true;
  e.capturedYjsUpdates = [];

  const { onChange } = editor;
  e.onChange = () => {
    if (!e.isRemote) {
      YjsEditorTest.applySlateOpsToYjs(e, e.operations);
    }

    if (onChange) {
      onChange();
    }

    if (e.onChangeComplete) {
      e.onChangeComplete();
    }
  };

  return e;
};
